##################################################
#
# Protocol File
#
# Protocol file for Keithley 2290
# ISIS, November 2022
# Author : P.J. L. Heesterman (Capgemini Engineering)
#
# NOTES:
#
# 
#
##################################################


##################################################
# General Settings
##################################################

ReplyTimeout = 1000;
Terminator = "\n";


###################################################
# Get functions
###################################################

# Read the device ID (only displays 39 chars)
get_IDN {
    out "*IDN?";
    in "KEITHLEY %*{INSTRUMENTS, }%/(.{0,39})/";
}

# Returns the actual output voltage (V).
# The value returned is a floating-point number and includes the + sign of the output voltage.
get_volt {
    out "VOUT?";
    in "%g";
}

# HV ON readback, used only by the @init handler.
get_volt_on {
    out "*STB? 7";
    in "%d";
}

# Returns the output voltage limit (V)
get_volt_limit {
    out "VLIM?";
    in "%g";
}

# Returns the value of the actual output current (A)
get_curr {
    out "IOUT?";
    in "%g";
}

# Returns the value of the current limit as a floating-point value (A)
get_curr_limit {
    out "ILIM?";
    in "%g";
}

# Returns the value of the current trip as a floating-point value (A)
get_curr_trip {
    out "ITRP?";
    in "%g";
}

# Returns the value of manual trip reset, 0 means manual and 1 means automatic
get_trip_reset_mode {
    out "TMOD?";
    in "%i";
}

# Get the program error status.
# The most likely error number is 10 (excution error).
get_error_status {
    out "LERR?";
    in "%d";
}

# Get the execution error status (0 or 1).
get_execution_error {
    out "*ESR? 4";
    in "%d";
}

# Get the command error status (0 or 1).
get_command_error {
    out "*ESR? 5";
    in "%d";
}

# Get the status byte
# Bit 0 - Stable  - Indicates that the VSET or ILIM value is stable.
# Bit 1 - V trip  - Indicates that a voltage trip has occurred.
# Bit 2 - I trip  - Indicates that a current trip has occurred.
# Bit 3 - I lim   - Indicates that a current limit condition has occurred.
# Bit 4 - MAV     - Indicates message available in the GPIB output queue.
# Bit 5 - ESB     - Indicates that an unmasked bit in the Standard Event Status Register has been set.
# Bit 6 - RQS/MSS - Request for Service/Master Summary Status.
# Bit 7 - HV on   - Indicates that the high voltage is on.
get_status_byte {
    out "*STB?";
    in "%d";
}

get_service_request_enable {
    out "*SRE?";
    in "%d";
}

#######################################################
# Operations
#######################################################

# Reset to defaults
reset {
    out "*RST";
}

# Clears all status registers
clear_status {
    out "*CLS";
}

# Clears any voltage or current trip status
clear_trip {
    out "TCLR";
}

#######################################################
# Set functions
#######################################################

# Sets the requested voltage. Must be <= volt_limit, or an execution error will occur.
set_volt {
    out "VSET %g";
    @init { get_volt; }
}

# Sets the voltage limit. Will trip if the voltage is greater.
set_volt_limit {
    out "VLIM %g";
    @init { get_volt_limit; }
}

# Sets the current limit value.
set_curr_limit {
    out "ILIM %g";
    @init { get_curr_limit; }
}

# Sets the current trip value.
set_curr_trip {
    out "ITRP %g";
    @init { get_curr_trip; }
}

# Requests the output voltage to be on.
set_volt_ON {
    out "%{HVOF|HVON}";
    @init { get_volt_ON; }
}

# sets the Standard Event Status Enable Register bits.
# The register isn't used further since the same information is available as the program error status.
set_event_status_enable {
    out "ESE %d";
}

# Sets the Service Request Enable Register bits.
# These are used to alert if a trip or limit condition ocurrs.
set_service_request_enable {
    out "*SRE %d";
}

# Sets the value of manual trip reset, 0 means manual and 1 means the trip reset mode is automatic
set_trip_reset_mode {
    out "TMOD %i";
    @init { get_trip_reset_mode; }
}

#############################################################
# Generic protocol
############################################################

# /// Use this send any command and get back the response (max 60 chars).
gen {
    out "%(\$1.VAL)s"; 
    in "%60c";
}
